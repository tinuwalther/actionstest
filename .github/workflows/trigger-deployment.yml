name: Trigger Deployment -> run Pester Tests, upload results and merge to test

on: 
#  push:
#    branches-ignore:
#    - 'main'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      name:
        description: 'branch name to checkout'
        default: 'deploy'
        required: true

jobs:
  trigger-deployment:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: pwsh
        
    steps:
      - name: Clone repo ${{ github.event.inputs.name }}
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.name }}

      - name: Checkout branch
        run: |
          $feature_branch = $("${{ github.event.inputs.name }}").ToLower()
          git checkout -b $feature_branch
          $currentbranch = git branch --show-current
          Write-Host "Current branch is $currentbranch"

      - name: Invoke Pester Tests
        run: |
          Write-Host "Install and import Modules"
          Install-Module -Name psyml -force
          Import-Module -Name Pester -MinimumVersion 5.3.3

          Write-Host "Initialize path-variable"
          $ParentLocation = Get-Location | Select -ExpandProperty Path
          $ReportsPath    = Join-Path -Path $ParentLocation -ChildPath 'Reports'
          $TestsPath      = Join-Path -Path $ParentLocation -ChildPath 'Tests'
          $BinPath        = Join-Path -Path $ParentLocation -ChildPath 'Bin'
          $ReadmeFullName = Join-Path -Path $ParentLocation -ChildPath 'README.md'
          $ReportFullName = Join-Path -Path $ReportsPath -ChildPath 'Last-TestsReport.NUnitXml'
          $CsvFullName    = $($ReportFullName -replace '.NUnitXml', '.csv')

          Write-Host "Run Pester Tests"
          $config = [PesterConfiguration]::Default
          $config.Run.Path           = $TestsPath
          $config.Filter.Tag         = "Required"
          $config.Output.Verbosity   = 'Normal'
          $config.Run.PassThru       = $true
          $config.Run.Throw          = $true
          $NUnitReport = Invoke-Pester -Configuration $config

          Write-Host "Create Last-TestsReport.NUnitXml"
          if(-not(Test-Path $ReportsPath)){
            $null = New-Item -Path $ReportsPath -ItemType Directory
          }
          $NUnitReport | Export-NUnitReport -Path $ReportFullName #Last-TestsReport.NUnitXml
          
          Write-Host "Create CSV-Report"
          if(Test-Path $CsvFullName){
            $null = Remove-Item -Path $CsvFullName -Force
          }
          $result = . "$($BinPath)/Read-FromXML.ps1" -Inputfile $ReportFullName
          $result.Tests | ConvertTo-Csv | Out-File -FilePath $($ReportFullName -replace '.NUnitXml', '.csv') -Encoding utf8 -NoClobber -Force

          Write-Host "Update README.md"
          Add-Content -Path $ReadmeFullName -Value "$($result.ExecutedAt)|$($result.Result)|$($result.TotalCount)|$($result.PassedCount)|$($result.FailedCount)|$($result.ErrorCount)|$($result.SkippedCount)|$($result.NotRunCount)"

      - name: Run Deployment
        run: |
          Write-Host "Run Deployment and add logfile"

      - name: Upload changes
        run: |
          Write-Host "Upload results"
          git config user.name github-actions
          git config user.email github-actions@github.com
          $currentbranch = git branch --show-current
          Write-Host "Current branch is $currentbranch"
          $CommitMessage = "Upload last results"
          git add .
          git commit -m $CommitMessage
          git push origin $currentbranch

      - name: Merge ${{ github.event.inputs.name }} back to main
        if: ${{ success() }}
        run: |
          $feature_branch = $("${{ github.event.inputs.name }}").ToLower()
          git fetch --unshallow
          git checkout main
          git pull
          git merge --no-ff $feature_branch -m "Auto-merge $feature_branch back to main"
          git push

      - name: Delete feature branch
        if: ${{ success() }}
        run: |
          $feature_branch = $("${{ github.event.inputs.name }}").ToLower()
          if($feature_branch -notmatch 'main'){
            git push --delete origin $feature_branch
          }else{
            Write-Host "$feature_branch is excluded from Autodelete"
          }
